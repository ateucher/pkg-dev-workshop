---
title: "📦 <br>Fundamentals of Package Development"
subtitle: The Whole Game 
author: "Andy Teucher"
format:
  revealjs: 
    theme: [night, slides.scss]
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: <https://r-pkgs.org>
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    highlight-style: a11y-dark
    fig-align: center
execute:
  echo: true
  eval: false
---

```{r}
#| eval: true
#| include: FALSE
#| cache: FALSE
library(fontawesome)

libminer_tmp <- fs::path_temp("libminer")
withr::with_options(
  list(usethis.description = NULL),
  usethis::create_package(
    libminer_tmp, open = FALSE, rstudio = TRUE, check_name = FALSE
  )
)
```

## The **`libminer`** package

We will:

-   Create a package called **`libminer`**
-   Use git to track our changes
-   Push the code to a repository on GitHub
-   Create tests for our functions
-   Create a documentation website

# A sneak preview of our end goal

![](img/7-dwarves.gif)

**`libminer`** will be a package to explore our R package libraries.

## Explore **`libminer`**

-   [GitHub](https://github.com/ateucher/libminer)
-   [Website](https://ateucher.github.io/libminer/)

\

[GitHub](https://github.com/ateucher/libminer) is the package in "Source" form

-   Package code in `R/`
-   Function documentation files in `man/`
-   Package vignettes in `vignettes/`
-   DESCRIPTION
-   NAMESPACE

## Step 0: Tools

-   `R >= 4.3.0`

-   ![](img/RStudio-Logo-Flat.png){style="vertical-align: middle;" width="180"}

    (<https://posit.co/download/rstudio-desktop/>)

-   Packages:

    ``` r
    install.packages(
      c("devtools", "roxygen2", "testthat", "rmarkdown")
    )
    ```

## Step 1: Load devtools 📦

\

```{r}
#| eval: true
library(devtools)
```

\

```{r}
#| eval: true
packageVersion("devtools")
```

-   Upgrade if necessary!

## Step 2: Create your 📦

```{r}
create_package("~/Desktop/libminer")
```

::: small
``` default
✔ Setting active project to '/Users/andy/Desktop/libminer'
✔ Creating 'R/'
✔ Writing 'DESCRIPTION'
Package: libminer
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R (parsed):
    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to
    pick a license
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
✔ Writing 'NAMESPACE'
✔ Writing 'libminer.Rproj'
✔ Adding '^libminer\\.Rproj$' to '.Rbuildignore'
✔ Adding '.Rproj.user' to '.gitignore'
✔ Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
✔ Opening '/Users/andy/Desktop/libminer/' in new RStudio session
✔ Setting active project to '<no active project>'
```
:::

## Step 3: Use git `r fa("git-alt")`

``` r
use_git()
```

::: small
``` default
✔ Setting active project to '/Users/andy/Desktop/libminer'
✔ Initialising Git repo
✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store', '.quarto' to '.gitignore'
There are 5 uncommitted files:
* '.gitignore'
* '.Rbuildignore'
* 'DESCRIPTION'
* 'libminer.Rproj'
* 'NAMESPACE'
Is it ok to commit them?

1: Absolutely not
2: Not now
3: Yeah
```
:::

## Step 4: Write your first function!

```{r}
#| eval: true
lib_summary <- function() {
  pkgs <- utils::installed.packages()
  pkg_tbl <- table(pkgs[, "LibPath"], dnn = "Library")
  as.data.frame(pkg_tbl, responseName = "n_packages")
}
```

## 

But where to put it?

``` r
use_r("lib_summary")
```

``` default
✔ Setting active project to '/Users/andy/Desktop/libminer'
• Modify 'R/lib_summary.R'
```

Put the definition of `lib_summary()` in this file

## Step 5: Test it out

\

### But how??

\

::: {.fragment .fade-in}
::: {.fragment .strike}
`source("R/lib_summary.R")`
:::
:::

\

::: {.fragment .fade-in}
::: {.fragment .strike}
Send function to console using RStudio (Ctrl/CMD+Return)
:::
:::

\

::: {.fragment .fade-in}
``` r
load_all()
```
:::

## `load_all()`

-   `r fa("keyboard")` Ctrl+Shift+L (Windows/Linux)

-   `r fa("keyboard")` Cmd+Shift+L (Mac)

-   Makes all of the functions from your in-development package available to use

-   Try it!

    ```{r}
    #| eval: true
    lib_summary()
    ```

-   Check:

    ``` r
    exists("lib_summary", where = globalenv(), inherits = FALSE)
    #> [1] FALSE
    ```

## Step 6: Commit to git `r fa("git-alt")`

``` sh
git diff
```

``` default
diff --git a/R/lib_summary.R b/R/lib_summary.R
new file mode 100644
index 0000000..53c012c
--- /dev/null
+++ b/R/lib_summary.R
@@ -0,0 +1,5 @@
+lib_summary <- function() {
+  pkgs <- utils::installed.packages()
+  pkg_tbl <- table(pkgs[, "LibPath"], dnn = "Library")
+  as.data.frame(pkg_tbl, responseName = "n_packages")
+}
```

``` sh
git add R/lib_summary.R
git commit -m "Add lib_summary()"
```

## Step 7: `check()`

-   Calls `R CMD check`
-   Ensures that all the various parts of the package are in good order

``` r
check()
```

``` default
── R CMD check results ─────────────────── libminer 0.0.0.9000 ────
Duration: 5.7s

❯ checking DESCRIPTION meta-information ... WARNING
  Non-standard license specification:
    `use_mit_license()`, `use_gpl3_license()` or friends to pick a
    license
  Standardizable: FALSE

0 errors ✔ | 1 warning ✖ | 0 notes ✔
```

## The `DESCRIPTION` file

::: small
```{cat, code = readLines(fs::path(libminer_tmp, "DESCRIPTION")), class.source = "yaml"}
```
:::

## Step 8: Edit `DESCRIPTION` file

<!-- TODO: Probably take a bigger detour here and detail the parts of a DESCRIPTION file.-->

## Step 9: Choose a license

`> ?licenses`

Permissive:

-   **MIT**: simple and permissive.
-   **Apache 2.0**: MIT + provides patent protection.

Copyleft:

-   **GPL (v2 or v3)**: requires sharing of improvements.
-   **AGPL v3**: requires sharing of improvements.
-   **LGPL (v2.1 or v3)**: requires sharing of improvements.

Creative commons licenses appropriate for data packages:

-   **CC0**: dedicated to public domain.
-   **CC-BY**: Free to share and adapt, must give appropriate credit.

## `use_*_license()`

``` r
use_mit_license()
```

``` default
✔ Adding 'MIT + file LICENSE' to License
✔ Writing 'LICENSE'
✔ Writing 'LICENSE.md'
✔ Adding '^LICENSE\\.md$' to '.Rbuildignore'
```

<!-- TODO: detour into licensing - CRAN requirements and general considerations -->

## Commit changes to git `r fa("git-alt")`

::: columns
::: {.column width="40%"}
::: small
``` default
git add DESCRIPTION \
        LICENSE \
        LICENSE.md \
        .Rbuildignore
        
git commit -m "Add MIT license"
```
:::
:::

::: {.column width="60%"}
![](img/git-commit-license.png)
:::
:::
